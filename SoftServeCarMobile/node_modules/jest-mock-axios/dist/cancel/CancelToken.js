"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Cancel = require("./Cancel");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Based of https://github.com/axios/axios
 * Copyright (c) 2014-present Matt Zabriskie (MIT License)
 */
var CancelToken = /*#__PURE__*/function () {
  _createClass(CancelToken, null, [{
    key: "source",
    value: function source() {
      var cancel;
      var token = new CancelToken(function (c) {
        return cancel = c;
      });
      return {
        cancel: cancel,
        token: token
      };
    }
  }]);

  function CancelToken(executor) {
    _classCallCheck(this, CancelToken);

    var token = this;
    this.promise = new Promise(function (resolve) {
      token.resolvePromise = resolve;
    });
    executor(function cancel(message) {
      if (token.reason || !token.resolvePromise) {
        return;
      }

      token.reason = new _Cancel.Cancel(message);
      token.resolvePromise(token.reason);
    });
  }

  _createClass(CancelToken, [{
    key: "throwIfRequested",
    value: function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
  }]);

  return CancelToken;
}();

exports["default"] = CancelToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4udHMiXSwibmFtZXMiOlsiQ2FuY2VsVG9rZW4iLCJjYW5jZWwiLCJ0b2tlbiIsImMiLCJleGVjdXRvciIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc29sdmVQcm9taXNlIiwibWVzc2FnZSIsInJlYXNvbiIsIkNhbmNlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7OztBQUlBOzs7O0lBSXFCQSxXOzs7NkJBQ0k7QUFDckIsVUFBSUMsTUFBSjtBQUNBLFVBQU1DLEtBQUssR0FBRyxJQUFJRixXQUFKLENBQWdCLFVBQUNHLENBQUQ7QUFBQSxlQUFRRixNQUFNLEdBQUdFLENBQWpCO0FBQUEsT0FBaEIsQ0FBZDtBQUVBLGFBQU87QUFDTEYsUUFBQUEsTUFBTSxFQUFOQSxNQURLO0FBRUxDLFFBQUFBLEtBQUssRUFBTEE7QUFGSyxPQUFQO0FBSUQ7OztBQVFELHVCQUFZRSxRQUFaLEVBQWtEO0FBQUE7O0FBQ2hELFFBQU1GLEtBQUssR0FBRyxJQUFkO0FBRUEsU0FBS0csT0FBTCxHQUFlLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQWE7QUFDcENMLE1BQUFBLEtBQUssQ0FBQ00sY0FBTixHQUF1QkQsT0FBdkI7QUFDSCxLQUZjLENBQWY7QUFJQUgsSUFBQUEsUUFBUSxDQUFDLFNBQVNILE1BQVQsQ0FBZ0JRLE9BQWhCLEVBQXlCO0FBQzlCLFVBQUdQLEtBQUssQ0FBQ1EsTUFBTixJQUFnQixDQUFDUixLQUFLLENBQUNNLGNBQTFCLEVBQTBDO0FBQ3RDO0FBQ0g7O0FBRUROLE1BQUFBLEtBQUssQ0FBQ1EsTUFBTixHQUFlLElBQUlDLGNBQUosQ0FBV0YsT0FBWCxDQUFmO0FBQ0FQLE1BQUFBLEtBQUssQ0FBQ00sY0FBTixDQUFxQk4sS0FBSyxDQUFDUSxNQUEzQjtBQUNILEtBUE8sQ0FBUjtBQVFEOzs7O3VDQUV5QjtBQUN0QixVQUFHLEtBQUtBLE1BQVIsRUFBZ0I7QUFDWixjQUFNLEtBQUtBLE1BQVg7QUFDSDtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FuY2VsIH0gZnJvbSBcIi4vQ2FuY2VsXCI7XG5cbnR5cGUgQ2FuY2VsZXIgPSAobWVzc2FnZT86IHN0cmluZykgPT4gdm9pZDtcblxuLyoqXG4gKiBCYXNlZCBvZiBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3NcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50IE1hdHQgWmFicmlza2llIChNSVQgTGljZW5zZSlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBwdWJsaWMgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsOiBDYW5jZWxlcjtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbigoYykgPT4gKGNhbmNlbCA9IGMpKTtcblxuICAgIHJldHVybiB7XG4gICAgICBjYW5jZWwsXG4gICAgICB0b2tlbixcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlUHJvbWlzZTogKHN0cmluZykgPT4gdm9pZDtcblxuICBwdWJsaWMgcmVhc29uOiBDYW5jZWw7XG5cbiAgcHVibGljIHByb21pc2U6IFByb21pc2U8Q2FuY2VsPjtcblxuICBjb25zdHJ1Y3RvcihleGVjdXRvcjogKGNhbmNlbDogQ2FuY2VsZXIpID0+IHZvaWQpIHtcbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0b2tlbi5yZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgICAgICBpZih0b2tlbi5yZWFzb24gfHwgIXRva2VuLnJlc29sdmVQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpXG4gICAgICAgIHRva2VuLnJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbilcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgICAgaWYodGhpcy5yZWFzb24pIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICAgIH1cbiAgfVxufVxuIl19