{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","children","size","style","theme","visible","rest","current","opacity","React","useRef","Animated","Value","isFirstRendering","animation","scale","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","colors","notification","restStyle","StyleSheet","flatten","textColor","isLight","black","white","borderRadius","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,WAAW,GAAG,EAApB;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,CAAC;AACbC,EAAAA,QADa;AAEbC,EAAAA,IAAI,GAAGH,WAFM;AAGbI,EAAAA,KAHa;AAIbC,EAAAA,KAJa;AAKbC,EAAAA,OAAO,GAAG,IALG;AAMb,KAAGC;AANU,CAAD,KAOD;AACX,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAAuBC,KAAK,CAACC,MAAN,CAC3B,IAAIC,sBAASC,KAAb,CAAmBP,OAAO,GAAG,CAAH,GAAO,CAAjC,CAD2B,CAA7B;AAGA,QAAMQ,gBAAgB,GAAGJ,KAAK,CAACC,MAAN,CAAsB,IAAtB,CAAzB;AAEA,QAAM;AACJI,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFX,KAFJ;AAIAK,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpB;AACA,QAAIH,gBAAgB,CAACN,OAArB,EAA8B;AAC5BM,MAAAA,gBAAgB,CAACN,OAAjB,GAA2B,KAA3B;AACA;AACD;;AAEDI,0BAASM,MAAT,CAAgBT,OAAhB,EAAyB;AACvBU,MAAAA,OAAO,EAAEb,OAAO,GAAG,CAAH,GAAO,CADA;AAEvBc,MAAAA,QAAQ,EAAE,MAAMJ,KAFO;AAGvBK,MAAAA,eAAe,EAAE;AAHM,KAAzB,EAIGC,KAJH;AAKD,GAZD,EAYG,CAAChB,OAAD,EAAUG,OAAV,EAAmBO,KAAnB,CAZH;AAcA,QAAM;AAAEO,IAAAA,eAAe,GAAGlB,KAAK,CAACmB,MAAN,CAAaC,YAAjC;AAA+C,OAAGC;AAAlD,MACJC,wBAAWC,OAAX,CAAmBxB,KAAnB,KAA6B,EAD/B;AAEA,QAAMyB,SAAS,GAAG,oBAAMN,eAAN,EAAuBO,OAAvB,KAAmCC,aAAnC,GAA2CC,aAA7D;AAEA,QAAMC,YAAY,GAAG9B,IAAI,GAAG,CAA5B;AAEA;AAAA;AACE;AACA,wBAAC,qBAAD,CAAU,IAAV;AACE,MAAA,aAAa,EAAE,CADjB;AAEE,MAAA,KAAK,EAAE,CACL;AACEM,QAAAA,OADF;AAEEc,QAAAA,eAFF;AAGEW,QAAAA,KAAK,EAAEL,SAHT;AAIEM,QAAAA,QAAQ,EAAEhC,IAAI,GAAG,GAJnB;AAKE,WAAGE,KAAK,CAAC+B,KAAN,CAAYC,OALjB;AAMEC,QAAAA,UAAU,EAAEnC,IANd;AAOEoC,QAAAA,MAAM,EAAEpC,IAPV;AAQEqC,QAAAA,QAAQ,EAAErC,IARZ;AASE8B,QAAAA;AATF,OADK,EAYLQ,MAAM,CAACC,SAZF,EAaLhB,SAbK;AAFT,OAiBMnB,IAjBN,GAmBGL,QAnBH;AAFF;AAwBD,CA7DD;;eA+De,wBAAUD,KAAV,C;;;;AAEf,MAAMwC,MAAM,GAAGd,wBAAWgB,MAAX,CAAkB;AAC/BD,EAAAA,SAAS,EAAE;AACTE,IAAAA,SAAS,EAAE,UADF;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTC,IAAAA,iBAAiB,EAAE,QAHV;AAITC,IAAAA,iBAAiB,EAAE,CAJV;AAKTC,IAAAA,QAAQ,EAAE;AALD;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? black : white;\n\n  const borderRadius = size / 2;\n\n  return (\n    // @ts-ignore\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}