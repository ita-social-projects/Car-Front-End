"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MaterialBottomTabView;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativePaper = require("react-native-paper");

var _native = require("@react-navigation/native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

// Optionally require vector-icons referenced from react-native-paper:
// https://github.com/callstack/react-native-paper/blob/4b26429c49053eaa4c3e0fae208639e01093fa87/src/components/MaterialCommunityIcon.tsx#L14
let MaterialCommunityIcons;

try {
  // Optionally require vector-icons
  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons').default;
} catch (e) {
  var _global$__expo, _global$__expo$Icon;

  // @ts-expect-error
  if ((_global$__expo = global.__expo) === null || _global$__expo === void 0 ? void 0 : (_global$__expo$Icon = _global$__expo.Icon) === null || _global$__expo$Icon === void 0 ? void 0 : _global$__expo$Icon.MaterialCommunityIcons) {
    // Snack doesn't properly bundle vector icons from sub-path
    // Use icons from the __expo global if available
    // @ts-expect-error
    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;
  } else {
    let isErrorLogged = false; // Fallback component for icons

    MaterialCommunityIcons = () => {
      if (!isErrorLogged) {
        if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
          console.error(e);
        }

        console.warn("Tried to use the icon '".concat(name, "' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons' could not be loaded."), "To remove this warning, try installing 'react-native-vector-icons' or use another method.");
        isErrorLogged = true;
      }

      return null;
    };
  }
}

function MaterialBottomTabViewInner({
  state,
  navigation,
  descriptors,
  ...rest
}) {
  const {
    dark,
    colors
  } = (0, _native.useTheme)();
  const buildLink = (0, _native.useLinkBuilder)();
  const theme = React.useMemo(() => {
    const t = dark ? _reactNativePaper.DarkTheme : _reactNativePaper.DefaultTheme;
    return { ...t,
      colors: { ...t.colors,
        ...colors,
        surface: colors.card
      }
    };
  }, [colors, dark]);
  return /*#__PURE__*/React.createElement(_reactNativePaper.BottomNavigation, _extends({}, rest, {
    theme: theme,
    navigationState: state,
    onIndexChange: index => navigation.dispatch({ ..._native.TabActions.jumpTo(state.routes[index].name),
      target: state.key
    }),
    renderScene: ({
      route
    }) => descriptors[route.key].render(),
    renderTouchable: _reactNative.Platform.OS === 'web' ? ({
      onPress,
      route,
      accessibilityRole: _0,
      borderless: _1,
      centered: _2,
      rippleColor: _3,
      style,
      ...rest
    }) => {
      return /*#__PURE__*/React.createElement(_native.Link, _extends({}, rest, {
        // @ts-expect-error: to could be undefined, but it doesn't affect functionality
        to: buildLink(route.name, route.params),
        accessibilityRole: "link",
        onPress: e => {
          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && ( // ignore clicks with modifier keys
          e.button == null || e.button === 0) // ignore everything but left clicks
          ) {
              e.preventDefault();
              onPress === null || onPress === void 0 ? void 0 : onPress(e);
            }
        },
        style: [styles.touchable, style]
      }));
    } : undefined,
    renderIcon: ({
      route,
      focused,
      color
    }) => {
      const {
        options
      } = descriptors[route.key];

      if (typeof options.tabBarIcon === 'string') {
        return /*#__PURE__*/React.createElement(MaterialCommunityIcons, {
          name: options.tabBarIcon,
          color: color,
          size: 24,
          style: styles.icon
        });
      }

      if (typeof options.tabBarIcon === 'function') {
        return options.tabBarIcon({
          focused,
          color
        });
      }

      return null;
    },
    getLabelText: ({
      route
    }) => {
      const {
        options
      } = descriptors[route.key];
      return options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;
    },
    getColor: ({
      route
    }) => descriptors[route.key].options.tabBarColor,
    getBadge: ({
      route
    }) => descriptors[route.key].options.tabBarBadge,
    getAccessibilityLabel: ({
      route
    }) => descriptors[route.key].options.tabBarAccessibilityLabel,
    getTestID: ({
      route
    }) => descriptors[route.key].options.tabBarTestID,
    onTabPress: ({
      route,
      preventDefault
    }) => {
      const event = navigation.emit({
        type: 'tabPress',
        target: route.key,
        canPreventDefault: true
      });

      if (event.defaultPrevented) {
        preventDefault();
      }
    }
  }));
}

function MaterialBottomTabView(props) {
  return /*#__PURE__*/React.createElement(_native.NavigationHelpersContext.Provider, {
    value: props.navigation
  }, /*#__PURE__*/React.createElement(MaterialBottomTabViewInner, props));
}

const styles = _reactNative.StyleSheet.create({
  icon: {
    backgroundColor: 'transparent'
  },
  touchable: {
    display: 'flex',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=MaterialBottomTabView.js.map